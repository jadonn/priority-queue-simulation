/**
 * CS471 Summer 2016 Course project
 * Simulation of priority scheduling on a one CPU system
 * @author Jadon N
 */

package priority;
import java.util.*;

class Process {
/**
 * This class is a helper class for more conveniently creating processes and 
 * storing information about each process. The class has a default time to 
 * completion for each process of 3 context switches.
 * @param newNumber, newPriority, the new process number and priority for this 
 * process
 * @return Process
 */
    private final int processNumber;
    private final int priority;
    private int timeToCompletion;
    
    public Process(int newNumber, int newPriority){
        processNumber = newNumber;
        priority = newPriority;
        timeToCompletion = 3;
    }
    
    public int getPriority(){
        return priority;
    }
    
    public int getProcessNumber(){
        return processNumber;
    }
    
    public int getTimeToCompletion(){
        return timeToCompletion;
    }
    
    public void doWork(){
        if(timeToCompletion > 0){
            timeToCompletion--;
        }
    }
}

public class PriorityQueue extends javax.swing.JFrame {
    
    private final ArrayList readyQueue = new ArrayList();
    private Process runningProcess = null;
    private final ArrayList blockingQueue = new ArrayList();
    private int createdProcesses = 0;
    private int contextSwitches = 0;
    /**
     * Creates new PriorityQueue
     */
    public PriorityQueue() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        blockingTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        readyTextArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        runningTextArea = new javax.swing.JTextArea();
        readyLabel = new javax.swing.JLabel();
        runningLabel = new javax.swing.JLabel();
        blockingLabel = new javax.swing.JLabel();
        addProcessField = new javax.swing.JTextField();
        addProcessButton = new javax.swing.JButton();
        priorityLabel = new javax.swing.JLabel();
        deleteProcessField = new javax.swing.JTextField();
        processIDLabel = new javax.swing.JLabel();
        deleteProcessButton = new javax.swing.JButton();
        contextSwitchButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTextArea = new javax.swing.JTextArea();
        historyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        blockingTextArea.setEditable(false);
        blockingTextArea.setColumns(20);
        blockingTextArea.setLineWrap(true);
        blockingTextArea.setRows(5);
        jScrollPane2.setViewportView(blockingTextArea);

        readyTextArea.setEditable(false);
        readyTextArea.setColumns(20);
        readyTextArea.setLineWrap(true);
        readyTextArea.setRows(5);
        readyTextArea.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(readyTextArea);

        runningTextArea.setEditable(false);
        runningTextArea.setColumns(20);
        runningTextArea.setLineWrap(true);
        runningTextArea.setRows(5);
        jScrollPane4.setViewportView(runningTextArea);

        readyLabel.setText("Ready Queue");

        runningLabel.setText("Running");

        blockingLabel.setText("Blocking");

        addProcessButton.setText("Add Process");
        addProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProcessButtonActionPerformed(evt);
            }
        });

        priorityLabel.setText("Priority");

        processIDLabel.setText("Process ID");

        deleteProcessButton.setText("Delete Process");
        deleteProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProcessButtonActionPerformed(evt);
            }
        });

        contextSwitchButton.setText("Context Switch");
        contextSwitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextSwitchButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        historyTextArea.setEditable(false);
        historyTextArea.setColumns(20);
        historyTextArea.setRows(5);
        jScrollPane1.setViewportView(historyTextArea);

        historyLabel.setText("History:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(addProcessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(deleteProcessButton)
                            .addGap(18, 18, 18)
                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(readyLabel)
                                    .addGap(75, 75, 75)
                                    .addComponent(runningLabel)
                                    .addGap(91, 91, 91)
                                    .addComponent(blockingLabel)
                                    .addGap(55, 55, 55))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(priorityLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(addProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(processIDLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(deleteProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(148, 148, 148)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(historyLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(contextSwitchButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(readyLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(runningLabel)
                                .addComponent(blockingLabel)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priorityLabel)
                            .addComponent(deleteProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(processIDLabel)
                            .addComponent(contextSwitchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteProcessButton)
                            .addComponent(addProcessButton)
                            .addComponent(exitButton)
                            .addComponent(historyLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProcessButtonActionPerformed
    /**
     * This method is triggered by the Delete Process button. It will look for 
     * the process with the process number entered into the process ID field. 
     * It also updates the history text area with a note that a process was 
     * deleted. It also triggeres the process text areas to redraw to reflect
     * the change.
     * @param event
     * @return none
     */
        
        int deletedProcess = Integer.parseInt(deleteProcessField.getText());
        if(runningProcess != null && runningProcess.getProcessNumber() == deletedProcess){
            runningProcess = null;
            runningTextArea.setText("");
        } else{
            boolean removed = removeFromReadyQueue(deletedProcess);
            if(!removed){
                removeFromBlockingQueue(deletedProcess);
            }
        }
        deleteProcessField.setText("");
        historyTextArea.append("Deleted P#: " + String.valueOf(deletedProcess) + "\n");
        redrawReadyTextArea();
        redrawBlockingTextArea();
    }//GEN-LAST:event_deleteProcessButtonActionPerformed

    private boolean removeFromReadyQueue(int processID){
    /**
     * This method iterates through readyQueue and removes the process with 
     * the process ID that matches processID. It returns true or false based 
     * on its success or failure.
     * @param int processID
     * @return boolean
     */
        
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            if(currentProcess.getProcessNumber() == processID){
                iterator.remove();
                return true;
            }
        }
        return false;
    }
    
    private void redrawReadyTextArea(){
    /**
     * This method redraws the ready queue's text area with a list of the 
     * processes currently contained in readyQueue.
     * @param none
     * @return none
     */
        
        String readyProcesses = "";
        readyTextArea.setText("");
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            readyProcesses = readyProcesses.concat("P#: " + String.valueOf(currentProcess.getProcessNumber()) + " | Priority: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        readyTextArea.setText(readyProcesses);
    }
    
    private void removeFromBlockingQueue(int processID){
    /**
     * This method iterates through blockingQueue and removes the process with 
     * the matching ID number.
     * @param int processID
     * @return none
     */
    
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            if(currentProcess.getProcessNumber() == processID){
                iterator.remove();
                break;
            }
        }
    }
    
    private void redrawBlockingTextArea(){
    /**
     * This method is used to redraw the blocking queue's text area with a list 
     * of all the processes currently stored in blockingQueue.
     * @param none
     * @return none
     */
        
        String blockingProcesses = "";
        blockingTextArea.setText("");
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            blockingProcesses = blockingProcesses.concat("P#: " + String.valueOf(currentProcess.getProcessNumber()) + " | Priority: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        blockingTextArea.setText(blockingProcesses);
    }
    
    private void addProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProcessButtonActionPerformed
    /**
     * This method is triggered by the Add Process button. It will add a new 
     * process to the readyQueue ArrayList with the value entered into the 
     * Priority entry box and with the next process number reflecting the total 
     * number of created processes.
     * @param event
     * @return none
     */
        
        createdProcesses++;
        int enteredPriority = Integer.parseInt(addProcessField.getText());
        if(enteredPriority <= 0){
            enteredPriority = 1;
        }
        Process newProcess = new Process(createdProcesses, enteredPriority);
        boolean addedProcess = readyQueue.add(newProcess);
        if (addedProcess){
            readyTextArea.append("P#: " + String.valueOf(newProcess.getProcessNumber()) + " | Priority: " + String.valueOf(enteredPriority) + "\n");
        }
        addProcessField.setText("");
        historyTextArea.append("Added P#: " + String.valueOf(createdProcesses) + " | Priority: " + String.valueOf(enteredPriority) + "\n");
    }//GEN-LAST:event_addProcessButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
    /**
     * This method is triggered by the Exit button. It exits the program.
     */
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void contextSwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextSwitchButtonActionPerformed
    /**
     * This method is triggered by the Context Switch button. It advances the 
     * system one unit of time forward. It also calls for an update of the 
     * text area recording the history of the system after the current number 
     * of context switches. The method also organizes the rearrangement of the 
     * running, ready, and blocking processes if the scheduling algorithm calls 
     * for a change in the process allocated CPU time.
     * @param event
     * @return none
     */
        if(runningProcess != null){
            runningProcess.doWork();
            if(runningProcess.getTimeToCompletion() == 0){
                historyTextArea.append("P# " + runningProcess.getProcessNumber() + " completed.\n");
                runningProcess = null;
                runningTextArea.setText("");
            }
        }
        if(!readyQueue.isEmpty() || !blockingQueue.isEmpty()){
            updateQueues();
        }
        contextSwitches++;
        updateHistory(contextSwitches);
        redrawReadyTextArea();
        redrawBlockingTextArea();
        
    }//GEN-LAST:event_contextSwitchButtonActionPerformed
    
    private void updateQueues(){
    /**
     * Helper method for processing the update to the queues after 
     * the current context switch.
     * @param none
     * @return none
     */
        
        
        int highestPriority = 10000;
        Process newRunningProcess = runningProcess;
        if(runningProcess != null){
            highestPriority = runningProcess.getPriority();
        }
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            int currentPriority = currentProcess.getPriority();
            if(currentPriority < highestPriority){
                newRunningProcess = currentProcess;
                highestPriority = currentPriority;
            }
        }
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            int currentPriority = currentProcess.getPriority();
            if((currentPriority < highestPriority)){
                newRunningProcess = currentProcess;
                highestPriority = currentPriority;
            }
        }
        if(runningProcess != null && newRunningProcess.getProcessNumber() != runningProcess.getProcessNumber()){
            blockingQueue.add(runningProcess);
            redrawBlockingTextArea();
            runningProcess = newRunningProcess;
            boolean removed = removeFromReadyQueue(newRunningProcess.getProcessNumber());
            if(!removed){
                removeFromBlockingQueue(newRunningProcess.getProcessNumber());
            }
        } else{
            boolean removed = removeFromReadyQueue(newRunningProcess.getProcessNumber());
            if(!removed){
                removeFromBlockingQueue(newRunningProcess.getProcessNumber());
            }
            runningProcess = newRunningProcess;
        }
        runningTextArea.setText("");
        runningTextArea.append("P#:" + String.valueOf(runningProcess.getProcessNumber()) + " | Priority:" + String.valueOf(runningProcess.getPriority()) + "\n");
    }
    
    private void updateHistory(int contextSwitches){
    /**
     * This method is a helper function. It updates the history text area with 
     * the current status of the system after contextSwitches many context 
     * switches.
     * @param contextSwitches, the number of context switches that have occurred
     * @return none
     */
        historyTextArea.append("\n");
        historyTextArea.append("System status after " + String.valueOf(contextSwitches) + " context switches.\n");
        historyTextArea.append("Running Process:\n");
        if (runningProcess !=  null){
            historyTextArea.append("P#: " + String.valueOf(runningProcess.getProcessNumber()) + " | Priority: " + String.valueOf(runningProcess.getPriority()) + "\n");
        }
        historyTextArea.append("\n");
        historyTextArea.append("Ready Processes:\n");
        for(Iterator<Process> iterator = readyQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            historyTextArea.append("P#: " + String.valueOf(currentProcess.getProcessNumber()) + " | Priority: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        historyTextArea.append("\n");
        historyTextArea.append("Blocked Processes:\n");
        for(Iterator<Process> iterator = blockingQueue.iterator(); iterator.hasNext();){
            Process currentProcess = iterator.next();
            historyTextArea.append("P#: " + String.valueOf(currentProcess.getProcessNumber()) + " | Priority: " + String.valueOf(currentProcess.getPriority()) + "\n");
        }
        historyTextArea.append("\n");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PriorityQueue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PriorityQueue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PriorityQueue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PriorityQueue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PriorityQueue().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProcessButton;
    private javax.swing.JTextField addProcessField;
    private javax.swing.JLabel blockingLabel;
    private javax.swing.JTextArea blockingTextArea;
    private javax.swing.JButton contextSwitchButton;
    private javax.swing.JButton deleteProcessButton;
    private javax.swing.JTextField deleteProcessField;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel historyLabel;
    private javax.swing.JTextArea historyTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JLabel processIDLabel;
    private javax.swing.JLabel readyLabel;
    private javax.swing.JTextArea readyTextArea;
    private javax.swing.JLabel runningLabel;
    private javax.swing.JTextArea runningTextArea;
    // End of variables declaration//GEN-END:variables
}

